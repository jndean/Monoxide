

function: 'fn' name '(' name_list ')' '(' name_list ')' '{'
               statement*
           '}' '~' name '(' name_list ')' ;

name_list: name ^ ',' ;

statement: (let_stmt | unlet_stmt | modop_stmt | if_stmt) ';';

if_stmt: 'if' '(' expression ')' 
         '{' statement* '}'
         ('else' '{' statement* '}' )?
         '~' 'if' '(' expression? ')' ;

modop_stmt: lookup modop expression ;

unlet_stmt: name '=:' expression ;

let_stmt: name ':=' expression ;

letref_stmt: name ':=' '&' lookup ;

unletref_stmt: name '=:' '&' lookup ;


expression : expression '|' expr0 
           | expr0;

expr0 : expr0 '&' expr1
      | expr1;

expr1 : expr1 '^' expr2
      | expr2;

expr2 : expr2 ('<' | '<=' | '>' | '>=' | '==' | '!=' ) expr3
      | expr3;

expr3 : expr3 '+' expr4
      | expr3 '-' expr4
      | expr4 ;

expr4 : expr4 '*'  expr5
      | expr4 '/'  expr5
      | expr4 '//' expr5
      | expr4 '%'  expr5
      | expr5 ;

expr5 : expr5 '**' atom
       | atom ;

atom : '(' expression ')'
     | array_literal
     | array_range
     | lookup
     | NUMBER
     | '-' atom
     | '!' atom
     | '#' lookup;


lookup: name ('[' expression ']')* ;

name: '.'? NAME ;

binop: '+' | '-' | '*' | '/' ;

modop '+=' | '-=' | '*=' | '/=' | '%=' | '//=' | '**=' | '&=' | '|=' | '^=' ;