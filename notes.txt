
#################### Let / Unlet ####################

GRAMMAR
name ':=' expression ';'

---------- FORWARDS ----------

EXAMPLE
X := 1;

REQUIREMENTS
- Name X doesn't exist

ACTIONS
- Creates a new exterior reference to a new var containing
  a deep copy of the RHS

---------- BACKWARDS ----------

EXAMPLE
X =: 1;

REQUIREMENTS
- X is the only reference of any kind to the var

ACTIONS
- Removes name X and frees the var


#################### Ref/ UnRef ####################

GRAMMAR
name ':=' '&' lookup ';'

---------- FORWARDS ----------

EXAMPLES
Y := &X;
Y := &X[0];

REQUIREMENTS
- Name X exists
- Name Y doesn't exist

ACTIONS
- Creates a new reference to the var behind X
- If the lookup has indices the ref type is interior.
- Otherwise it is the same ref type as X.

---------- BACKWARDS ----------

EXAMPLE
Y =: &X;
Y =: &X[0];

REQUIREMENTS
- Y and X are the same ref type and the same var
- Y and X are different names

ACTIONS
- Frees the name Y and removes it from var


#################### Push ####################

GRAMMAR
name '=>' lookup ';'
name '=>' lookup ';'

---------- FORWARDS ----------

EXAMPLE
X => Y;

REQUIREMENTS
- X and Y are different vars
- X is not an interior ref
- Pull requirements?

ACTIONS
- X var is pushed onto Y var
- Name X is freed
- All other exerior refs to X become interior refs to Y?

---------- BACKWARDS ----------

EXAMPLE
X <= Y;

REQUIREMENTS
- Name X is free
- Y has no _other_ interior references

ACTIONS
- Pops a var off Y, puts it under new exterior ref X





fn find(A: grid, a: row)() {
   idx := -1;
   for (r in [0 : #grid]) {
      if (idx == -1 && grid[r] == row) {
         idx += r + 1;
      } ~if(r == idx);
   }
} ~find(idx);


Y := [];
X := 1;
doit(X, Y);
X =: &Y[0];
Y =: [1];

fn doit(X, Y)() {
   X2 := &X;
   X2 => Y;
} ~doit();

Y := [1];
X := &Y[0];
~doit(X, Y)
X =: 1;
Y =: [];



########################
## Function arguments ##
########################

Borrowed items may not be unlet or unref'd.

# Default # 
fn F(X)
Caller may only pass singly-owned vars, so function can do what it likes

# Unbound reference #
fn F(&X)
Function promises not to do anything it can't do to interior refs, so caller may pass
in anything not linked to other args

# Linked references #
fn F(&A X, &a x, &b Y)(&b y) {
  y =: &Y[0];
  y2 := &Y[0];
} ~F(&b y2);

Caller may pass in references to shared vars if they share label.
Function still can't reshape any of the ref vars, since it might not
know about all refs. Upper case for exterior, lower case for interior refs.

# Owned linked references #
fn F<A>(&A X){
    col <= X;
    x := &x[0];
} ~F(col, &a x);

Chevron notation before the args denotes any labels that are owned by the function.
The caller must pass all references to the function. The function may reshape vars.