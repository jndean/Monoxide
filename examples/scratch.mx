



fn main()() {

    data := [0,0,0,3,3,3,3,3,5,5,5,4,4,4,4,4,4,4];
    data => compress() => result;
    println(result);

} ~main()


fn compress()(data) 
{
    output := [];

    while (#data) {
        current_symbol <= data;
        count := 1;

        while (#data & data[#data - 1] == current_symbol)
        {
            value <= data;
            value =: current_symbol;
            count += 1;
        }
        ~while (count > 1);

        count => output;
        current_symbol => output;

    } ~while(#output);

    println('Data: ', data);
    data =: [];
} 
~compress(output)



fn main(argv)() 
{
    while (x > 0) {
        x /= 2;
    } ~while (x != 10);

    if (x != 2) {
        speed *= 2;
        x *= 2;
    } else {
        speed *= 5;
    } ~if (x != 4);

    doundo {
        sum := 0;
        for (x : X) {
            sum += x;
        }
    } yield {
        println("Sum:", sum);
    }

    

} ~main();


fn reshape2D()() {

} ~reshape2D()

fn myfunc(&G grid, width, height, &g col1, &g col2)() {

} ~myfunc();


fn argmax(X)() {
    .best_idx := 0;
    .best &= X[0];

    for (.i in [1:#X]) {
        if (X[.i] > .best) {
            .best = X[.i];
            .best_idx = .i;
        } ~if (.best_idx == .i);
    }

   promote .best_idx => best_idx;

} ~argmax (best_idx);